from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.core.validators import MinValueValidator, RegexValidator


class User(AbstractUser):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å"""
    first_name = models.CharField(
        max_length=settings.MAX_USER_NAME,
        verbose_name="–∏–º—è",
    )
    last_name = models.CharField(
        max_length=settings.MAX_USER_NAME,
        verbose_name="—Ñ–∞–º–∏–ª–∏—è",
    )  
    username = models.CharField(
        max_length=settings.MAX_USER_NAME,
        validators=[RegexValidator(r"^[\w.@+-]+$")],
        unique=True,
        verbose_name="–Ω–∏–∫–Ω–µ–π–º",
    )
    email = models.EmailField(
        unique=True,
        max_length=254,
        verbose_name="–µ-mail",
    )
    avatar = models.ImageField(
        upload_to="users/",
        null=True,
        blank=True,
        verbose_name="—Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è",
    )

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["username",
                       "first_name",
                       "last_name",]

    class Meta:
        verbose_name_plural = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        verbose_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        ordering = ("email",)

    def __str__(self):
        return self.username


class Subscription(models.Model):
    """–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="subscriptions",
        verbose_name="–ø–æ–¥–ø–∏—Å—á–∏–∫",
    )
    subscribed_to = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="subscribers",
        verbose_name="–∞–≤—Ç–æ—Ä",
    )

    class Meta:
        verbose_name = "–ø–æ–¥–ø–∏—Å–∫–∞"
        verbose_name_plural = "–ø–æ–¥–ø–∏—Å–∫–∏"
        ordering = ("user", "subscribed_to")
        constraints = [
            models.UniqueConstraint(
                fields=["user", "subscribed_to"],
                name="unique_subscription_users",
            ),
            models.CheckConstraint(
                check=~models.Q(user=models.F("subscribed_to")),
                name="no_self_subscription",
            ),
        ]

    def __str__(self):
        return f"{self.user} ‚Üí {self.subscribed_to}"


class Ingredient(models.Model):
    """–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã"""

    measurement_unit = models.CharField(
        max_length=settings.MAX_MEASUREMENT_NAME,
        verbose_name="–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
    )
    name = models.CharField(
        max_length=settings.MAX_INGREDIENT_NAME,
        verbose_name="–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞",
    )

    class Meta:
        verbose_name = "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"
        verbose_name_plural = "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"
        ordering = ("name",)

    def __str__(self):
        return f"{self.name} ({self.measurement_unit})"


class Tag(models.Model):
    """–¢–µ–≥–∏"""

    name = models.CharField(
        max_length=settings.MAX_TAG_NAME,
        unique=True,
        verbose_name="–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞",
    )
    slug = models.SlugField(
        max_length=settings.MAX_TAG_NAME,
        unique=True,
        verbose_name="slug —Ç–µ–≥–∞",
    )

    class Meta:
        ordering = ("name",)
        verbose_name = "—Ç–µ–≥"
        verbose_name_plural = "—Ç–µ–≥–∏"

    def __str__(self):
        return self.name


class Recipe(models.Model):
    """–†–µ—Ü–µ–ø—Ç—ã"""

    name = models.CharField(
        max_length=settings.MAX_RECIPE_NAME,
        verbose_name="–∏–º—è —Ä–µ—Ü–µ–ø—Ç–∞",
    )
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name="–∞–≤—Ç–æ—Ä",
    )
    text = models.TextField(
        verbose_name="—Ä–µ—Ü–µ–ø—Ç",
    )
    image = models.ImageField(
        upload_to="recipes/",
        verbose_name="—Ñ–æ—Ç–æ",
    )
    cooking_time = models.PositiveSmallIntegerField(
        validators=[
            MinValueValidator(settings.MIN_COOKING_TIME),
        ],
        verbose_name="–≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è",
    )
    ingredients = models.ManyToManyField(
        Ingredient,
        through="RecipeIngredient",
        related_name="recipes",
        verbose_name="–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
    )
    tags = models.ManyToManyField(
        Tag,
        related_name="recipes",
        verbose_name="—Ç–µ–≥–∏",
    )

    class Meta:
        ordering = ("-id",)
        default_related_name = "recipes"
        verbose_name = "—Ä–µ—Ü–µ–ø—Ç"
        verbose_name_plural = "—Ä–µ—Ü–µ–ø—Ç—ã"

    def __str__(self):
        return self.name


class RecipeIngredient(models.Model):
    """–†–µ—Ü–µ–ø—Ç—ã –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"""
    ingredient = models.ForeignKey(
        Ingredient,
        on_delete=models.CASCADE,
        verbose_name="–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç",
    )
    recipe = models.ForeignKey(
        Recipe,
        on_delete=models.CASCADE,
        verbose_name="—Ä–µ—Ü–µ–ø—Ç",
    )

    amount = models.PositiveSmallIntegerField(
        validators=[
            MinValueValidator(settings.MIN_AMOUNT),
        ],
        verbose_name="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
    )

    class Meta:
        ordering = ("recipe",)
        default_related_name = "recipe_ingredients"
        constraints = [
            models.UniqueConstraint(
                fields=["recipe", "ingredient"],
                name="unique_recipe_ingredient",
            ),
        ]
        verbose_name = "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç–µ"
        verbose_name_plural = "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö"

    def __str__(self):
        return f"{self.recipe}: {self.ingredient} x{self.amount}"


class Favorite(models.Model):
    """–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"""

    recipe = models.ForeignKey(
        Recipe,
        on_delete=models.CASCADE,
        verbose_name="—Ä–µ—Ü–µ–ø—Ç",
    )
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        verbose_name="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    )

    class Meta:
        ordering = ("user", "recipe")
        default_related_name = "favorites"
        constraints = [
            models.UniqueConstraint(
                fields=["user", "recipe"],
                name="unique_favorite",
            ),
        ]
        verbose_name = "–∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"
        verbose_name_plural = "–∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"

    def __str__(self):
        return f"{self.user} ‚ô• {self.recipe}"


class ShoppingCart(models.Model):
    """–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    recipe = models.ForeignKey(
        Recipe,
        on_delete=models.CASCADE,
        related_name="in_shopping_carts",
        verbose_name="—Ä–µ—Ü–µ–ø—Ç",
    )
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="shopping_carts",
        verbose_name="–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    )

    class Meta:
        ordering = ("user", "recipe")
        constraints = [
            models.UniqueConstraint(
                fields=["user", "recipe"],
                name="unique_shopping_cart",
            ),
        ]
        verbose_name = "—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"
        verbose_name_plural = "—Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫"

    def __str__(self):
        return f"{self.user} üõí {self.recipe}"
