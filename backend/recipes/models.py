from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import (
    MinValueValidator,
    RegexValidator,
)
from django.conf import settings


class User(AbstractUser):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    email = models.EmailField(
        verbose_name="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        unique=True,
        max_length=254,
    )
    username = models.CharField(
        verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        max_length=settings.MAX_USER_NAME,
        unique=True,
        validators=[RegexValidator(r"^[\w.@+-]+$")],
    )
    first_name = models.CharField(
        verbose_name="–ò–º—è",
        max_length=settings.MAX_USER_NAME,
    )
    last_name = models.CharField(
        verbose_name="–§–∞–º–∏–ª–∏—è",
        max_length=settings.MAX_USER_NAME,
    )
    avatar = models.ImageField(
        verbose_name="–ê–≤–∞—Ç–∞—Ä–∫–∞",
        upload_to="users/",
        blank=True,
        null=True,
    )

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = [
        "username",
        "first_name",
        "last_name",
    ]

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        ordering = ("email",)

    def __str__(self):
        return self.username


class Subscription(models.Model):
    """–ú–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        verbose_name="–ü–æ–¥–ø–∏—Å—á–∏–∫",
        on_delete=models.CASCADE,
        related_name="subscriptions",
    )
    subscribed_to = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        verbose_name="–ê–≤—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        on_delete=models.CASCADE,
        related_name="subscribers",
    )

    class Meta:
        verbose_name = "–ü–æ–¥–ø–∏—Å–∫–∞"
        verbose_name_plural = "–ü–æ–¥–ø–∏—Å–∫–∏"
        ordering = ("user", "subscribed_to")
        constraints = [
            models.UniqueConstraint(
                fields=["user", "subscribed_to"],
                name="unique_subscription_users",
            ),
            models.CheckConstraint(
                check=~models.Q(user=models.F("subscribed_to")),
                name="no_self_subscription",
            ),
        ]

    def __str__(self):
        return f"{self.user} ‚Üí {self.subscribed_to}"


class Ingredient(models.Model):
    """–ú–æ–¥–µ–ª—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""

    name = models.CharField(
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞",
        max_length=settings.MAX_INGREDIENT_NAME,
    )
    measurement_unit = models.CharField(
        verbose_name="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
        max_length=settings.MAX_MEASUREMENT_NAME,
    )

    class Meta:
        verbose_name = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"
        verbose_name_plural = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"
        ordering = ("name",)

    def __str__(self):
        return f"{self.name} ({self.measurement_unit})"


class Tag(models.Model):
    """–ú–æ–¥–µ–ª—å —Ç–µ–≥–æ–≤."""

    name = models.CharField(
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞",
        max_length=settings.MAX_TAG_NAME,
        unique=True,
    )
    slug = models.SlugField(
        verbose_name="Slug —Ç–µ–≥–∞",
        max_length=settings.MAX_TAG_NAME,
        unique=True,
    )

    class Meta:
        verbose_name = "–¢–µ–≥"
        verbose_name_plural = "–¢–µ–≥–∏"
        ordering = ("name",)

    def __str__(self):
        return self.name


class Recipe(models.Model):
    """–ú–æ–¥–µ–ª—å —Ä–µ—Ü–µ–ø—Ç–æ–≤."""

    name = models.CharField(
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞",
        max_length=settings.MAX_RECIPE_NAME,
    )
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        verbose_name="–ê–≤—Ç–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞",
        on_delete=models.CASCADE,
    )
    text = models.TextField(
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞",
    )
    image = models.ImageField(
        verbose_name="–§–æ—Ç–æ –±–ª—é–¥–∞",
        upload_to="recipes/",
    )
    cooking_time = models.PositiveSmallIntegerField(
        verbose_name="–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (–º–∏–Ω)",
        validators=[
            MinValueValidator(settings.MIN_COOKING_TIME),
        ],
    )
    ingredients = models.ManyToManyField(
        Ingredient,
        verbose_name="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
        through="RecipeIngredient",
        related_name="recipes",
    )
    tags = models.ManyToManyField(
        Tag,
        verbose_name="–¢–µ–≥–∏",
        related_name="recipes",
    )

    class Meta:
        verbose_name = "–†–µ—Ü–µ–ø—Ç"
        verbose_name_plural = "–†–µ—Ü–µ–ø—Ç—ã"
        ordering = ("-id",)
        default_related_name = "recipes"

    def __str__(self):
        return self.name


class RecipeIngredient(models.Model):
    """–ú–æ–¥–µ–ª—å —Å–≤—è–∑–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""

    recipe = models.ForeignKey(
        Recipe,
        verbose_name="–†–µ—Ü–µ–ø—Ç",
        on_delete=models.CASCADE,
    )
    ingredient = models.ForeignKey(
        Ingredient,
        verbose_name="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç",
        on_delete=models.CASCADE,
    )
    amount = models.PositiveSmallIntegerField(
        verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        validators=[
            MinValueValidator(settings.MIN_AMOUNT),
        ],
    )

    class Meta:
        verbose_name = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç–µ"
        verbose_name_plural = "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö"
        ordering = ("recipe",)
        default_related_name = "recipe_ingredients"
        constraints = [
            models.UniqueConstraint(
                fields=["recipe", "ingredient"],
                name="unique_recipe_ingredient",
            ),
        ]

    def __str__(self):
        return f"{self.recipe}: {self.ingredient} x{self.amount}"


class Favorite(models.Model):
    """–ú–æ–¥–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."""

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        on_delete=models.CASCADE,
    )
    recipe = models.ForeignKey(
        Recipe,
        verbose_name="–†–µ—Ü–µ–ø—Ç",
        on_delete=models.CASCADE,
    )

    class Meta:
        verbose_name = "–ò–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"
        verbose_name_plural = "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã"
        ordering = ("user", "recipe")
        default_related_name = "favorites"
        constraints = [
            models.UniqueConstraint(
                fields=["user", "recipe"],
                name="unique_favorite",
            ),
        ]

    def __str__(self):
        return f"{self.user} ‚ô• {self.recipe}"


class ShoppingCart(models.Model):
    """–ú–æ–¥–µ–ª—å —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫."""

    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        on_delete=models.CASCADE,
        related_name="shopping_carts",
    )
    recipe = models.ForeignKey(
        Recipe,
        verbose_name="–†–µ—Ü–µ–ø—Ç",
        on_delete=models.CASCADE,
        related_name="in_shopping_carts",
    )

    class Meta:
        verbose_name = "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"
        verbose_name_plural = "–°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫"
        ordering = ("user", "recipe")
        constraints = [
            models.UniqueConstraint(
                fields=["user", "recipe"],
                name="unique_shopping_cart",
            ),
        ]

    def __str__(self):
        return f"{self.user} üõí {self.recipe}"